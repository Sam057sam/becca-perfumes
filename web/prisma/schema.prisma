// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum PurchaseStatus {
  DRAFT
  ORDERED
  RECEIVED
  CANCELLED
}

enum SaleStatus {
  DRAFT
  CONFIRMED
  FULFILLED
  CANCELLED
}

enum PaymentStatus {
  UNPAID
  PARTIAL
  PAID
  REFUNDED
}

enum StockMovementType {
  OPENING
  PURCHASE
  SALE
  ADJUSTMENT
  TRANSFER_IN
  TRANSFER_OUT
  RETURN_IN
  RETURN_OUT
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id               String          @id @default(cuid())
  name             String?
  email            String?         @unique
  emailVerified    DateTime?
  hashedPassword   String?
  image            String?
  roleId           Int?
  role             Role?           @relation(fields: [roleId], references: [id])
  accounts         Account[]
  sessions         Session[]
  auditLogs        AuditLog[]
  purchasesCreated Purchase[]      @relation("PurchaseCreatedBy")
  purchasesUpdated Purchase[]      @relation("PurchaseUpdatedBy")
  salesCreated     Sale[]          @relation("SaleCreatedBy")
  salesUpdated     Sale[]          @relation("SaleUpdatedBy")
  expensesCreated  Expense[]       @relation("ExpenseCreatedBy")
  expensesUpdated  Expense[]       @relation("ExpenseUpdatedBy")
  stockMovements   StockMovement[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String? @db.Text
  oauth_token        String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  parentId    Int?
  parent      Category?  @relation("CategorySelf", fields: [parentId], references: [id])
  children    Category[] @relation("CategorySelf")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([name, parentId])
}

model Unit {
  id        Int       @id @default(autoincrement())
  name      String
  symbol    String?   @unique
  precision Int       @default(2)
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id             Int                @id @default(autoincrement())
  sku            String             @unique
  name           String
  description    String?
  barcode        String?            @unique
  categoryId     Int?
  unitId         Int?
  defaultCost    Decimal?           @db.Decimal(12, 2)
  defaultPrice   Decimal?           @db.Decimal(12, 2)
  minStock       Decimal?           @db.Decimal(12, 3)
  isActive       Boolean            @default(true)
  category       Category?          @relation(fields: [categoryId], references: [id])
  unit           Unit?              @relation(fields: [unitId], references: [id])
  purchaseItems  PurchaseItem[]
  saleItems      SaleItem[]
  productStocks  ProductWarehouse[]
  stockMovements StockMovement[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model Warehouse {
  id             Int                @id @default(autoincrement())
  name           String
  code           String?            @unique
  address        String?
  city           String?
  state          String?
  country        String?
  postalCode     String?
  phone          String?
  email          String?
  isActive       Boolean            @default(true)
  productStocks  ProductWarehouse[]
  stockMovements StockMovement[]
  purchases      Purchase[]
  sales          Sale[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model ProductWarehouse {
  id           Int       @id @default(autoincrement())
  productId    Int
  warehouseId  Int
  quantity     Decimal   @default(0) @db.Decimal(14, 3)
  costAverage  Decimal?  @db.Decimal(12, 4)
  reorderPoint Decimal?  @db.Decimal(12, 3)
  product      Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  warehouse    Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([productId, warehouseId])
}

model Supplier {
  id          Int        @id @default(autoincrement())
  name        String
  contactName String?
  email       String?
  phone       String?
  taxNumber   String?
  address     String?
  city        String?
  state       String?
  country     String?
  postalCode  String?
  notes       String?
  isActive    Boolean    @default(true)
  purchases   Purchase[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Customer {
  id         Int      @id @default(autoincrement())
  name       String
  email      String?
  phone      String?
  taxNumber  String?
  address    String?
  city       String?
  state      String?
  country    String?
  postalCode String?
  notes      String?
  isActive   Boolean  @default(true)
  sales      Sale[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Purchase {
  id             Int             @id @default(autoincrement())
  reference      String?         @unique
  status         PurchaseStatus  @default(DRAFT)
  supplierId     Int?
  warehouseId    Int?
  orderedAt      DateTime?
  receivedAt     DateTime?
  dueDate        DateTime?
  subtotal       Decimal         @default(0) @db.Decimal(14, 2)
  discount       Decimal?        @db.Decimal(14, 2)
  tax            Decimal?        @db.Decimal(14, 2)
  shipping       Decimal?        @db.Decimal(14, 2)
  total          Decimal         @default(0) @db.Decimal(14, 2)
  notes          String?
  createdById    String?
  updatedById    String?
  supplier       Supplier?       @relation(fields: [supplierId], references: [id])
  warehouse      Warehouse?      @relation(fields: [warehouseId], references: [id])
  createdBy      User?           @relation("PurchaseCreatedBy", fields: [createdById], references: [id])
  updatedBy      User?           @relation("PurchaseUpdatedBy", fields: [updatedById], references: [id])
  items          PurchaseItem[]
  stockMovements StockMovement[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model PurchaseItem {
  id          Int      @id @default(autoincrement())
  purchaseId  Int
  productId   Int
  quantity    Decimal  @db.Decimal(12, 3)
  unitCost    Decimal  @db.Decimal(12, 2)
  discount    Decimal? @db.Decimal(12, 2)
  tax         Decimal? @db.Decimal(12, 2)
  total       Decimal  @db.Decimal(14, 2)
  receivedQty Decimal? @db.Decimal(12, 3)
  notes       String?
  purchase    Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Sale {
  id             Int             @id @default(autoincrement())
  reference      String?         @unique
  status         SaleStatus      @default(DRAFT)
  paymentStatus  PaymentStatus   @default(UNPAID)
  customerId     Int?
  warehouseId    Int?
  issuedAt       DateTime?
  fulfilledAt    DateTime?
  dueDate        DateTime?
  subtotal       Decimal         @default(0) @db.Decimal(14, 2)
  discount       Decimal?        @db.Decimal(14, 2)
  tax            Decimal?        @db.Decimal(14, 2)
  shipping       Decimal?        @db.Decimal(14, 2)
  total          Decimal         @default(0) @db.Decimal(14, 2)
  notes          String?
  createdById    String?
  updatedById    String?
  customer       Customer?       @relation(fields: [customerId], references: [id])
  warehouse      Warehouse?      @relation(fields: [warehouseId], references: [id])
  createdBy      User?           @relation("SaleCreatedBy", fields: [createdById], references: [id])
  updatedBy      User?           @relation("SaleUpdatedBy", fields: [updatedById], references: [id])
  items          SaleItem[]
  stockMovements StockMovement[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model SaleItem {
  id        Int      @id @default(autoincrement())
  saleId    Int
  productId Int
  quantity  Decimal  @db.Decimal(12, 3)
  unitPrice Decimal  @db.Decimal(12, 2)
  discount  Decimal? @db.Decimal(12, 2)
  tax       Decimal? @db.Decimal(12, 2)
  total     Decimal  @db.Decimal(14, 2)
  notes     String?
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([productId])
}

model StockMovement {
  id          Int               @id @default(autoincrement())
  productId   Int
  warehouseId Int
  type        StockMovementType
  quantity    Decimal           @db.Decimal(12, 3)
  reference   String?
  purchaseId  Int?
  saleId      Int?
  notes       String?
  createdById String?
  createdAt   DateTime          @default(now())
  product     Product           @relation(fields: [productId], references: [id])
  warehouse   Warehouse         @relation(fields: [warehouseId], references: [id])
  purchase    Purchase?         @relation(fields: [purchaseId], references: [id])
  sale        Sale?             @relation(fields: [saleId], references: [id])
  createdBy   User?             @relation(fields: [createdById], references: [id])

  @@index([productId])
  @@index([warehouseId])
  @@index([purchaseId])
  @@index([saleId])
}

model ExpenseCategory {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  parentId    Int?
  parent      ExpenseCategory?  @relation("ExpenseCategorySelf", fields: [parentId], references: [id])
  children    ExpenseCategory[] @relation("ExpenseCategorySelf")
  expenses    Expense[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([name, parentId])
}

model Expense {
  id            Int                 @id @default(autoincrement())
  categoryId    Int?
  reference     String?             @unique
  incurredAt    DateTime
  amount        Decimal             @db.Decimal(14, 2)
  description   String?
  vendor        String?
  paymentMethod String?
  notes         String?
  createdById   String?
  updatedById   String?
  category      ExpenseCategory?    @relation(fields: [categoryId], references: [id])
  attachments   ExpenseAttachment[]
  createdBy     User?               @relation("ExpenseCreatedBy", fields: [createdById], references: [id])
  updatedBy     User?               @relation("ExpenseUpdatedBy", fields: [updatedById], references: [id])
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

model ExpenseAttachment {
  id         Int      @id @default(autoincrement())
  expenseId  Int
  url        String
  name       String?
  mimeType   String?
  size       Int?
  uploadedAt DateTime @default(now())
  expense    Expense  @relation(fields: [expenseId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        Int         @id @default(autoincrement())
  userId    String?
  action    AuditAction
  entity    String
  entityId  String?
  ipAddress String?
  metadata  Json?
  createdAt DateTime    @default(now())
  user      User?       @relation(fields: [userId], references: [id])

  @@index([entity])
  @@index([createdAt])
}

// Singleton company profile and settings
model Company {
  id               Int      @id @default(autoincrement())
  slug             String   @unique

  // Company Details
  logo             String?
  name             String
  phone            String?
  email            String?
  address1         String?
  address2         String?
  landmark         String?
  pincode          String?
  city             String?
  state            String?
  country          String?

  // Tax & Currency
  gstin            String?
  taxId            String?
  currencySymbol   String?
  currencyCode     String?

  // Invoice Settings
  terms            String?
  bankDetails      String?

  // Payment Gateway Settings
  razorpayApiKey    String?
  razorpayApiSecret String?
  paypalClientId    String?
  paypalSecret      String?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
